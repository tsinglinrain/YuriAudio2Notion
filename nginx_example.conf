    # yuri
    server {
        listen 443 ssl http2;  #
        
        server_name yuri.example.com;  #域名
        ssl_certificate       /home/user/ssl/example_cert.pem;  #证书位置
        ssl_certificate_key   /home/user/ssl/example_key.pem; #私钥位置
        
        # 添加这两行，覆盖全局的 application/octet-stream
        default_type text/plain;
        charset utf-8;

        ssl_session_timeout 5m;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_protocols    TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        location / {
            return 200 "Flask webhook server is running. Ready to receive Notion webhooks.";

        }
        location /webhook-database {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
    
            # POST请求处理
            if ($request_method = POST) {
                proxy_pass http://127.0.0.1:5050;  # Flask后端
                break;
            }

            # 处理 GET 请求 (浏览器访问时显示状态)
            # 注意：这个if块必须在POST块之后，但在return 405之前
            if ($request_method = GET) {
                return 200 "Notion webhook-database endpoint is active and listening for POST requests.";
            }
    
            # 其他方法拦截
            return 405;
        }

        location /webhook-page {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
    
            # POST请求处理
            if ($request_method = POST) {
                proxy_pass http://127.0.0.1:5050;  # Flask后端
                break;
            }
    
            # # GET请求处理
            if ($request_method = GET) {
                return 200 "Notion webhook-page endpoint is active and listening for POST requests.";
            }
    
            # 其他方法拦截
            return 405;
        }
    }