import requests
from notion_client import Client
import yaml
import re

from typing import Dict, List, Any

class NotionClient:
    def __init__(self, database_id, token, payment_platform):
        self.database_id = database_id
        self.token = token
        self.client: Client = Client(auth=token)
        self.payment_platform = payment_platform

    def create_page(self, properties):
        """Create a new page in the database"""

        try:
            self.client.pages.create(
                icon = {
                    "type": "emoji",
                    "emoji": "üéß"   # ÈùûÂ∏∏Ë¥¥Âêà,Â†™Áß∞ÂÆåÁæéÂõæÊ†á
                },
                # cover # ‰πüÊ≤°ÊúâÈúÄÊ±Ç
                parent={"database_id": self.database_id},
                properties=properties,
                # children=blocks,  # ‰∏çË¶Åchildren
            )
            print("Page created successfully\n‰∏ä‰º†ÊàêÂäü")
        except Exception as e:
            print(f"Failed to create page: {e}")
            print("-" * 20)
            print("‰∏ä‰º†Â§±Ë¥•,Ëá™Âä®Ë∑≥Ëøá,ËØ∑Ëá™Ë°åÊ£ÄÊü•")

    def cre_in_database_paper(
            self, 
            name, 
            description, 
            description_sequel,
            publish_date, 
            update_frequency, 
            ori_price, 
            author_name,
            up_name,
            tags,
            source,
            main_cv,
            main_cv_role,
            supporting_cv,
            supporting_cv_role,
            commercial_drama,
            platform="È•≠Ëßí",
            time_zone="Asia/Shanghai"
        ):
        """Create a new page in the database"""
        properties = {
            "Name": {"title": [{"text": {"content": name}}]},
            "ÁÆÄ‰ªã": {"rich_text": [{"text": {"content": description}}]},
            "ÁÆÄ‰ªãÁª≠": {"rich_text": [{"text": {"content": description_sequel}}]},
            "Publish Date": {
                "date": {
                    "start": publish_date,
                    "time_zone": time_zone,  # Êó∂Âå∫, ÂèÇËßÅÂÆòÊñπÊñáÊ°£
                }
            },
            "Êõ¥Êñ∞": {"select": {"name": update_frequency}},
            "Price": {"number": ori_price},
            "ÂéüËëó": {"select": {"name": author_name}},
            "up‰∏ª": {"select": {"name": up_name}},
            "Tags": {"multi_select": tags},
            "Êù•Ê∫ê": {"select": {"name": source}},
            "cv‰∏ªÂΩπ":{"multi_select": main_cv},
            "È•∞ÊºîËßíËâ≤": {"multi_select": main_cv_role},
            "cvÂçèÂΩπ": {"multi_select": supporting_cv},
            "ÂçèÂΩπÈ•∞ÊºîËßíËâ≤": {"multi_select": supporting_cv_role},
            "ÂïÜÂâß": {"select": {"name": commercial_drama}},
            "Platform": {"multi_select": [{"name": platform}]},
        }
        self.create_page(properties)

def description_split(description: str) -> list[str, str]:
    """Â∞ÜÊèèËø∞ÂàÜÂâ≤ÊàêÊÆµËêΩ"""
    # ÊâæÂà∞‚ÄúÂá∫ÂìÅ‚ÄùÁöÑ‰ΩçÁΩÆ
    start = description.find("Âá∫ÂìÅ")
    if start == -1:
        return [description, ""]
    
    # ÂêëÂâçÊü•ÊâæÊúÄËøëÁöÑÊç¢Ë°åÁ¨¶
    split_index = description.rfind('\n', 0, start)
    if split_index == -1:
        return [description, ""]
    
    # ÂàÜÂâ≤Â≠óÁ¨¶‰∏≤ÔºåÂπ∂ÁßªÈô§Êç¢Ë°åÁ¨¶
    part1 = description[ :split_index-1]
    part2 = description[split_index+1: ]
    return [part1, part2]

def description_upname(description: str) -> str:
    """up_nameÊèêÂèñ, ‰∏çÂáÜÁ°Æ, ÈúÄË¶Å‰∫∫Â∑•ÂÆ°Ê†∏"""
    # ‰ºòÂÖàÂåπÈÖç"Âà∂‰ΩúÂá∫ÂìÅ"Êàñ"Âá∫ÂìÅÂà∂‰Ωú"ÂâçÁöÑÊúÄÂêé‰∏Ä‰∏™ÈÄóÂè∑ÂàÜÂâ≤ÁöÑÂÜÖÂÆπ
    combined_match = re.search(r'Ôºå([^Ôºå]+?)(?=Âà∂‰ΩúÂá∫ÂìÅ|Âá∫ÂìÅÂà∂‰Ωú)', description)
    if combined_match:
        return combined_match.group(1).strip()
    
    # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®"Âà∂‰Ωú"
    produce_match = re.search(r'Ôºå([^Ôºå]+?)(?=Âà∂‰Ωú)', description)
    if produce_match:
        up_name_temp = produce_match.group(1).strip()
        # Â¶ÇÊûúÂ≠òÂú®Â§ö‰∏™ÂêçÁß∞Ôºå‰ª•ÈÄóÂè∑ÊàñÈ°øÂè∑ÂàÜÈöîÔºåÂèñÁ¨¨‰∏Ä‰∏™
        if '„ÄÅ' in up_name_temp:
            return up_name_temp.split('„ÄÅ')[0].strip()
        return up_name_temp
    
    # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®"Âá∫ÂìÅ"
    publish_match = re.search(r'Ôºå([^Ôºå]+?)(?=Âá∫ÂìÅ)', description)
    if publish_match:
        up_name_temp = publish_match.group(1).strip()
        if '„ÄÅ' in up_name_temp:
            return up_name_temp.split('„ÄÅ')[0].strip()
        return up_name_temp
    
    # Êó†ÂåπÈÖçÊÉÖÂÜµ
    return ""

def description_tag(description: str) -> list:
    '''ÂπøÊí≠Ââß'''
    match = re.search(r'Ôºå([^Ôºå]+?)ÂπøÊí≠Ââß„Ää', description)
    if not match:
        return []
    
    tags_str = match.group(1).strip()
    tags_str = tags_str.replace('ÁôæÂêà', '')   # Âè™Áà±ÁôæÂπø, ÂâîÈô§Âõ∫ÊúâÊ†áÁ≠æ
    tag_list = []
    
    # Â§ÑÁêÜ‚ÄúÂÖ®‰∏ÄÂ≠£‚ÄùÊ†áÁ≠æ
    if 'ÂÖ®‰∏ÄÂ≠£' in tags_str:
        # tag_list.append('ÂÖ®‰∏ÄÂ≠£')   # Á∫†Áªì‰∫Ü‰∏Ä‰∏ã, ËøòÊòØÁªôÊ≥®ÈáäÊéâ‰∫Ü, Êõ¥ÂÉèÂº∫Ë∞ÉÈ¢òÊùêÈ£éÊ†º
        tags_str = tags_str.replace('ÂÖ®‰∏ÄÂ≠£', '')
    
    # ÂàÜÂâ≤Ââ©‰ΩôÂÜÖÂÆπ‰∏∫Ê†áÁ≠æ
    if tags_str:
        chunk_size = 2
        # Ê†πÊçÆÈïøÂ∫¶ÂÜ≥ÂÆöÊòØÂê¶ÂàÜÂâ≤‰∏∫‰∏§Â≠óÊ†áÁ≠æ
        if len(tags_str) % chunk_size == 0:
            remaining_tags = [tags_str[i:i+chunk_size] for i in range(0, len(tags_str), chunk_size)]
        else:
            remaining_tags = [tags_str]
        tag_list.extend(remaining_tags)
    
    return tag_list

def format_tag_list(data: List) -> List:
    """Â∞Ütags list formated"""
    formatted_data = []
    for item in data:
        formatted_data.append(
            {
                "name": item,
            }
        )
    return formatted_data   

def main():
    """Á§∫‰æã‰ΩøÁî®"""
    name = "ËêΩÈü≥ËÆ∞ Á¨¨‰∏ÄÂ≠£"
    description = "Áê¥Â£∞Ëµ∑Ôºå‰∏çÁü•ÊÉÖÂßã„ÄÇ\nÂº¶Èü≥ËêΩÔºåÈöæËß£ÊÉÖÁó¥„ÄÇ\n\n‰∏≠Â∑ûÁöáÊóèÂäøÂæÆÔºåÂ§©‰∏ãË¢´‰∫îÂ§ßËó©ÁéãÂâ≤ÊçÆÔºåÊ∑∑ÊàòÈó¥È£éÈõ®È£òÊëá„ÄÇËÄå‰∫îËó©‰πã‰∏≠ÔºåÂ±ûÂ¥üÁéãÂäøÂäõÊúÄÁõõ„ÄÇ\n\nÂ•≥‰º∂Êõ≤Á∫¢Áª°ÂàùÂÖ•Â¥üÁéãÂ∫úÔºåÁúºÁúãÁùÄÂ∞±Ë¶ÅÊëáË∫´Âèò‰∏∫‰∏ñÂ≠ê‰æçÂ¶æÔºåÂç¥Ë¢´ÂÜ†‰ª•ÁãêÂ™öÊÉë‰∏ª‰πãÂêçÔºåÈô©‰∫õË¢´ÈÄêÂá∫ÁéãÂ∫ú„ÄÇÂπ∏Â•ΩÂæóÈÉ°‰∏ªÂç´ÁíÉÊî∏Êî∂ÁïôÔºåÊâçÂãâÂº∫Êúâ‰∫ÜÂÆπË∫´‰πãÊâÄÔºåÊÆä‰∏çÁü•Áúã‰ººÁóÖÂº±Êó†ÂÆ≥ÁöÑÈÉ°‰∏ªÔºåÊâçÊòØÁúüÊ≠£ÁöÑÁãêÁã∏„ÄÇ\n\n[Â•¥Â©¢ÂèØÊúâÈÄâÊã©ÁöÑ‰ΩôÂú∞Ôºü]\n[‰Ω†Ëá™ÁÑ∂ÊòØ‚Äî‚ÄîÊ≤°ÂæóÈÄâ„ÄÇ]\n\nÂà©Áî®ÔºåÊùÉË°°ÔºåÊå£ÊâéÔºåÊ≤âÊ≤¶......Ë°ÄÈõ®ËÖ•È£éÔºåÊöóÊµÅÊ∂åÂä®ÔºõË∫´‰∏ñÊµÆÊ≤âÔºåÂëΩÈöæÁî±Â∑±„ÄÇ\n\nÈïø‰Ω©ÊñáÂ≠¶ÔºåÈóª‰∫∫Á¢éËØ≠ÂéüËëóÔºå‰ªüÈáë‰∏çÊç¢Â∑•‰ΩúÂÆ§Âá∫ÂìÅÔºåÂè§È£éÁôæÂêàÂπøÊí≠Ââß„ÄäËêΩÈü≥ËÆ∞„ÄãÁ¨¨‰∏ÄÂ≠£„ÄÇÊú¨ÂâßÂÖ±‰∏§Â≠£ÔºåÁ¨¨‰∏ÄÂ≠£Ê≠£ÂâßÂÖ±ÂçÅÊúüÔºåÊØèÊúüÊó∂ÈïøÂùáÂú®30ÂàÜÈíü‰ª•‰∏äÔºåÂÆöÊúüÊéâËêΩËä±ÁµÆÔºå‰∏çÂÆöÊúüÊéâËêΩÂ∞èÂâßÂú∫„ÄÅÁ¶èÂà©Ôºå12Êúà16Êó•Ëµ∑ÊØèÂë®‰∏Ä‰∏≠ÂçàÂçÅ‰∫åÁÇπÊõ¥Êñ∞ÔºåÊ¨¢ËøéÊî∂Âê¨„ÄÇ\n\nËøΩÂâßÊó•ÂéÜÔºö\n12Êúà6Êó•Ôºö‰∏ªÈ¢òÊõ≤\n12Êúà9Êó•ÔºöÈ¢ÑÂëä\n12Êúà12Êó•Ôºö‰∏ªÂΩπÂâçÈáá\n12Êúà14Êó•ÔºöÊ•îÂ≠ê Êõ≤Á∫¢Áª°ÁØá\n12Êúà15Êó•ÔºöÊ•îÂ≠ê Âç´ÁíÉÊî∏ÁØá\n12Êúà16Êó•ÔºöÁ¨¨‰∏ÄÊúü\n\nÁ¶ÅÊ≠¢ÁõóÁâà„ÄÅÁØ°Êîπ„ÄÅÁî®‰∫éÂÖ∂‰ªñÂïÜ‰∏öÁî®ÈÄîÁ≠âË°å‰∏∫ÔºåËøùËÄÖÂøÖËøΩÁ©∂Ê≥ïÂæãË¥£‰ªª„ÄÇ"
    description, description_sequel = description_split(description)
    # horizontal = "https://fanjiao-media.fanjiao.co/Fgzc5o5EKjfMEvl-pIoRtialfCJ2?imageMogr2/crop/!850x519.4444444444445a0a0/format/png/thumbnail/400x"
    # publish_date = "2024-12-01T14:25:56+08:00"
    publish_date = "2024-12-01T14:25:56Z"
    # "2020-12-08T12:00:00Z‚Äù
    update_frequency = "Â∑≤ÂÆåÁªì"
    ori_price = 218
    author_name = "Èóª‰∫∫Á¢éËØ≠"
    
    up_name = description_upname(description_sequel)
    
    tags = description_tag(description_sequel)
    # print(tags)
    tags = format_tag_list(tags)
    # print(tags)
    
    source = "ÊîπÁºñ" if "ÂéüËëó" in description_sequel else "ÂéüÂàõ" # ÈúÄË¶Å‰∫∫Â∑•ÂÆ°ÈòÖ
    print(source)

    main_cv = [{'name': 'Á∫∏Â∑æ'}, {'name': 'Ê∏ÖÈ∏¢'}]
    main_cv_role = [{'name': 'Êõ≤Á∫¢Áª°'}, {'name': 'Âç´ÁíÉÊî∏'}]
    supporting_cv = []
    supporting_cv_role = []
    commercial_drama = "ÂïÜÂâß" if ori_price > 0 else "ÈùûÂïÜ"
    with open("config_private.yaml", "r", encoding="utf-8") as file:
        config = yaml.safe_load(file)

    notion_config = config.get("notion_config", {})
    database_id, token = (i for i in notion_config.values())

    notion_client = NotionClient(database_id, token, "fanjiao")
    notion_client.cre_in_database_paper(
        name, 
        description,
        description_sequel, 
        publish_date, 
        update_frequency, 
        ori_price, 
        author_name,
        up_name,
        tags,
        source,
        main_cv,
        main_cv_role,
        supporting_cv,
        supporting_cv_role,
        commercial_drama
    )

if __name__ == "__main__":
    main()